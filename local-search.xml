<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HCR</title>
    <link href="/HCR/"/>
    <url>/HCR/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This project is a health check recommendation system built using LangChain, and DeepSeek LLM. It uses RAG technology to recommend health check packages based on user information.</p></blockquote><html><iframe     src="https://health-check.streamlit.app/~/+/?embed=true"     allow="camera;microphone;clipboard-read;clipboard-write;"     loading="lazy"     class="w-full"     style="width: 100%; height: 100%; min-height: 700px"></iframe></html>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-87f64f20" role="button" aria-expanded="false" aria-controls="collapse-87f64f20">        <div class="fold-arrow">▶</div>Test_by_dify      </div>      <div class="fold-collapse collapse" id="collapse-87f64f20">        <div class="fold-content">          <html><iframe    src="https://udify.app/chatbot/ePi1dHiwaybYeUHn"    style="width: 100%; height: 100%; min-height: 700px"    frameborder="0"    allow="microphone"></iframe></html>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>tech🧩</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>About me</title>
    <link href="/github/"/>
    <url>/github/</url>
    
    <content type="html"><![CDATA[<div align="center">  <!-- visitor statistics logo 访客数统计徽标 -->  <img src="https://komarev.com/ghpvc/?username=nuyoahwjl&label=Views&color=0e75b6&style=flat" alt="访问量统计" /></div><p align="center"><a href="https://github.com/ryo-ma/github-profile-trophy" title="Go to Source">      <img align="center" width=100% src="https://github-profile-trophy.vercel.app/?username=nuyoahwjl&theme=merko&row=1&column=7&margin-h=15&margin-w=5&no-bg=true" width="1000" alt="TROPHY" />   </a></p><p align="center"><table><tr><td align="center"><picture><source media="(prefers-color-scheme: dark)"  srcset="https://raw.githubusercontent.com/Nuyoahwjl/Nuyoahwjl/output-3d-contrib/profile-night-green.svg" /><source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/Nuyoahwjl/Nuyoahwjl/output-3d-contrib/profile-south-season-animate.svg" /><img alt="github profile contributions chart" src="https://raw.githubusercontent.com/Nuyoahwjl/Nuyoahwjl/output-3d-contrib/profile-south-season-animate.svg" width="80%" /></picture></td></tr></table></p>]]></content>
    
    
    <categories>
      
      <category>github🎯</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hamilton</title>
    <link href="/Hamilton/"/>
    <url>/Hamilton/</url>
    
    <content type="html"><![CDATA[<html><img src="https://nuyoahwjl.github.io/img/hhh2.png" alt=""style="display: block; margin: 0 auto;"></html><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>13个人在有13个座位的圆桌上一起聚餐，要求每个人每天不与相同的人邻座，问最多可以聚几次餐（考虑哈密尔顿回路）</p><h3 id="转化为图论问题"><a href="#转化为图论问题" class="headerlink" title="转化为图论问题"></a>转化为图论问题</h3><p>我们可以将这个问题转化为图论中的哈密尔顿回路问题：</p><ol><li><strong>顶点</strong>：13个人，每个人是一个顶点。</li><li><strong>边</strong>：每次聚餐的座位安排，每条边连接两个相邻的人。</li></ol><p>在完全图 $K_{13}$ 中，每个顶点（人）与其他所有顶点（人）都有一条边（可能成为邻座关系）。我们的目标是找到多条哈密尔顿回路，使得这些回路中的边（邻座关系）没有重复。</p><h3 id="哈密尔顿回路"><a href="#哈密尔顿回路" class="headerlink" title="哈密尔顿回路"></a>哈密尔顿回路</h3><p>哈密尔顿回路是一条通过每个顶点一次且仅一次的闭合路径（即首尾相连）。在圆桌上，找到一条哈密尔顿回路相当于找到一个具体的座位安排。由于每次聚餐中座位安排都是圆桌的一种排列，且要求这些排列中的邻座关系不重复，我们需要找到不相交的哈密尔顿回路。</p><h3 id="最大独立哈密尔顿回路数"><a href="#最大独立哈密尔顿回路数" class="headerlink" title="最大独立哈密尔顿回路数"></a>最大独立哈密尔顿回路数</h3><p>对于一个 $n$ 顶点的完全图 $K_n$：</p><ul><li>如果 $n$ 是奇数，则该图最多有 $\frac{n-1}{2}$条相互独立的哈密尔顿回路（每条边只在一个回路中出现一次）。</li><li>对于 $K_{13}$，$n&#x3D;13$，所以最多有：$\frac{13-1}{2} &#x3D; 6$条相互独立的哈密尔顿回路。</li></ul><h3 id="理解具体安排"><a href="#理解具体安排" class="headerlink" title="理解具体安排"></a>理解具体安排</h3><p>在每条哈密尔顿回路中，每个顶点（人）都有特定的邻座安排。这些安排在每条不同的回路中都不会重复。例如：</p><ul><li>回路1：1-2-3-…-13-1</li><li>回路2：1-3-5-…-13-2-4-…-12-1</li><li>等等</li></ul><p>通过这种方式，每个回路都表示一种不同的座位安排，并且确保每个人在每次聚餐中都有不同的邻座。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>经过上述分析和计算，13个人在有13个座位的圆桌上聚餐，并且每个人每天不与相同的人邻座，最多可以聚6次餐。这是因为我们能够找到6条独立的哈密尔顿回路，每条回路代表一次不同的聚餐安排。</p><html><img src="https://nuyoahwjl.github.io/img/hhh.png" alt=""style="display: block; margin: 0 auto;"></html>]]></content>
    
    
    <categories>
      
      <category>tech🧩</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Quickselect</title>
    <link href="/Quickselect/"/>
    <url>/Quickselect/</url>
    
    <content type="html"><![CDATA[<p>为了求整型数组的中位数，并且效率要优于O(n^2)，同时不对全部数据进行排序，可以使用一种称为 <strong>选择算法</strong>（Selection Algorithm）的方法。最著名的选择算法是 <strong>快速选择算法</strong>（Quickselect），它的平均时间复杂度是O(n)。</p><p>快速选择算法基于快速排序的分治思想。快速选择每次可以选定一个枢轴（pivot），然后通过一次划分（partition）将数组分成两部分，其中一部分所有元素都小于等于枢轴，另一部分所有元素都大于等于枢轴。根据枢轴的位置，可以确定中位数所在的部分，并递归进行选择。</p><p>下面是实现快速选择算法来求中位数的C语言代码：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-comment">// 辅助函数：交换两个元素</span><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span> &#123;    <span class="hljs-type">int</span> temp = *a;    *a = *b;    *b = temp;&#125;<span class="hljs-comment">// 分区函数：选择最后一个元素作为枢轴，返回枢轴的最终位置</span><span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;    <span class="hljs-type">int</span> pivot = a[high];    <span class="hljs-type">int</span> i = low - <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = low; j &lt; high; j++) &#123;        <span class="hljs-keyword">if</span> (a[j] &lt;= pivot) &#123;            i++;            swap(&amp;a[i], &amp;a[j]);        &#125;    &#125;    swap(&amp;a[i + <span class="hljs-number">1</span>], &amp;a[high]);    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">// 快速选择函数：在a[low...high]范围内寻找第k小的元素</span><span class="hljs-type">int</span> <span class="hljs-title function_">quickSelect</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high, <span class="hljs-type">int</span> k)</span> &#123;    <span class="hljs-keyword">if</span> (low == high) &#123;        <span class="hljs-keyword">return</span> a[low];    &#125;    <span class="hljs-type">int</span> pivotIndex = partition(a, low, high);    <span class="hljs-comment">// 计算当前枢轴是第几个元素</span>    <span class="hljs-type">int</span> numElementsInLowPartition = pivotIndex - low + <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> (numElementsInLowPartition == k) &#123;        <span class="hljs-keyword">return</span> a[pivotIndex];    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &lt; numElementsInLowPartition) &#123;        <span class="hljs-keyword">return</span> quickSelect(a, low, pivotIndex - <span class="hljs-number">1</span>, k);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> quickSelect(a, pivotIndex + <span class="hljs-number">1</span>, high, k - numElementsInLowPartition);    &#125;&#125;<span class="hljs-comment">// 主函数：求数组的中位数</span><span class="hljs-type">int</span> <span class="hljs-title function_">MidValue</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> &#123;    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;        <span class="hljs-comment">// 数组长度为奇数，中位数为第(n/2 + 1)小的元素</span>        <span class="hljs-keyword">return</span> quickSelect(a, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 数组长度为偶数，中位数为第(n/2)和第(n/2 + 1)小的元素的平均值</span>        <span class="hljs-type">int</span> mid1 = quickSelect(a, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, n / <span class="hljs-number">2</span>);        <span class="hljs-type">int</span> mid2 = quickSelect(a, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);        <span class="hljs-keyword">return</span> (mid1 + mid2) / <span class="hljs-number">2</span>;    &#125;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>&#125;;    <span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);    <span class="hljs-type">int</span> median = MidValue(a, n);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组的中位数是: %d\n&quot;</span>, median);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>辅助函数</strong> <code>swap</code>：交换两个整数的值。</li><li><strong>分区函数</strong> <code>partition</code>：实现快速排序中的分区步骤，选择最后一个元素作为枢轴。</li><li><strong>快速选择函数</strong> <code>quickSelect</code>：在数组的指定范围内寻找第k小的元素。根据分区结果递归查找目标元素。</li><li><strong>主函数</strong> <code>MidValue</code>：根据数组长度的奇偶性，调用<code>quickSelect</code>寻找中位数。如果长度为奇数，直接返回第<code>n/2 + 1</code>小的元素；如果为偶数，返回第<code>n/2</code>和第<code>n/2 + 1</code>小的元素的平均值。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>快速选择算法在最坏情况下时间复杂度是O(n^2)，但其平均时间复杂度为O(n)，在绝大多数情况下效率较高。</li><li>该实现通过数组中的元素范围来递归查找目标中位数，而不需要对整个数组进行排序，从而满足题目的效率要求。</li></ul><p>此实现有效利用了快速排序的思想，确保了在大多数情况下的高效性，同时避免了全面排序带来的额外开销。</p>]]></content>
    
    
    <categories>
      
      <category>code💻</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>free books</title>
    <link href="/books/"/>
    <url>/books/</url>
    
    <content type="html"><![CDATA[    <div class="fold">      <div class="fold-title fold-primary collapsed" data-toggle="collapse" href="#collapse-d9c4d242" role="button" aria-expanded="false" aria-controls="collapse-d9c4d242">        <div class="fold-arrow">▶</div>C/C++      </div>      <div class="fold-collapse collapse" id="collapse-d9c4d242">        <div class="fold-content">          <ul><li><a href="http://zh.cppreference.com/">C&#x2F;C++ 中文参考手册</a> </li><li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice">C++ 并发编程指南</a></li><li><a href="http://akaedu.github.io/book/">Linux C编程一站式学习</a> </li><li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese">CGDB中文手册</a></li><li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md">100个gdb小技巧</a></li><li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md">100个gcc小技巧</a></li><li><a href="https://github.com/anjuke/zguide-cn">ZMQ 指南</a></li><li><a href="http://www.ituring.com.cn/book/1203">How to Think Like a Computer Scientist</a> (中英文版)</li><li><a href="https://github.com/seisman/how-to-write-makefile">跟我一起写 Makefile</a></li><li><a href="https://free-online-ebooks.appspot.com/tools/gnu-make-cn/">GNU make中文手册</a>(<a href="https://hacker-yhj.github.io/resources/gun_make.pdf">PDF</a>)</li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html">GNU make 指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/">Google C++ 风格指南</a></li><li><a href="https://github.com/andycai/cprimer">C&#x2F;C++ Primer</a></li><li><a href="http://www.sunistudio.com/cppfaq/">C++ FAQ LITE(中文版)</a></li><li><a href="https://github.com/Mooophy/Cpp-Primer">C++ Primer 5th Answers</a></li><li><a href="http://www.devbean.net/category/qt-study-road-2/">DevBean的《Qt学习之路2》(Qt5)</a></li><li><a href="https://github.com/cwc1987/QmlBook-In-Chinese">中文版《QmlBook》</a></li><li><a href="https://github.com/wuye9036/CppTemplateTutorial">C++ Template 进阶指南</a></li><li><a href="https://github.com/luohaha/Chinese-uvbook">libuv中文教程</a></li><li><a href="http://zh.highscore.de/cpp/boost/">Boost 库中文教程</a></li><li><a href="https://github.com/wizardforcel/lcthw-zh">笨办法学C</a></li><li><a href="https://github.com/changkun/modern-cpp-tutorial">高速上手 C++11&#x2F;14&#x2F;17</a></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-f465f755" role="button" aria-expanded="false" aria-controls="collapse-f465f755">        <div class="fold-arrow">▶</div>Java      </div>      <div class="fold-collapse collapse" id="collapse-f465f755">        <div class="fold-content">          <ul><li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference">Apache Shiro 用户指南</a></li><li><a href="https://github.com/waylau/Jersey-2.x-User-Guide">Jersey 2.x 用户指南</a></li><li><a href="https://github.com/waylau/spring-framework-4-reference">Spring Framework 4.x参考文档</a></li><li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide">Spring Boot参考指南</a></li><li><a href="http://mybatis.org/mybatis-3/zh/index.html">MyBatis中文文档</a></li><li><a href="https://github.com/waylau/RestDemo">用jersey构建REST服务</a></li><li><a href="https://github.com/waylau/activiti-5.x-user-guide">Activiti 5.x 用户指南</a></li><li><a href="https://hawstein.com/2014/01/20/google-java-style/">Google Java编程风格指南</a></li><li><a href="https://github.com/waylau/netty-4-user-guide">Netty 4.x 用户指南</a></li><li><a href="https://github.com/waylau/essential-netty-in-action">Netty 实战(精髓)</a></li><li><a href="https://github.com/waylau/rest-in-action">REST 实战</a></li><li><a href="https://github.com/waylau/java-code-conventions">Java 编码规范</a></li><li><a href="https://github.com/waylau/apache-mina-2.x-user-guide">Apache MINA 2 用户指南</a></li><li><a href="https://github.com/waylau/h2-database-doc">H2 Database 教程</a></li><li><a href="https://github.com/waylau/servlet-3.1-specification">Java Servlet 3.1 规范</a></li><li><a href="https://github.com/waylau/jsse-reference-guide">JSSE 参考指南</a></li><li><a href="https://github.com/biezhi/jb">Java开源实现及最佳实践</a></li><li><a href="https://github.com/waylau/essential-java">Java 编程要点</a></li><li><a href="https://github.com/wizardforcel/modern-java-zh">Java 8 简明教程</a></li><li><a href="https://github.com/sjsdfg/effective-java-3rd-chinese">Effective Java 第3版中文版</a></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-warning collapsed" data-toggle="collapse" href="#collapse-041782b1" role="button" aria-expanded="false" aria-controls="collapse-041782b1">        <div class="fold-arrow">▶</div>Kotlin      </div>      <div class="fold-collapse collapse" id="collapse-041782b1">        <div class="fold-content">          <ul><li><a href="https://hltj.gitbooks.io/kotlin-reference-chinese/content/">Kotlin 官方参考文档 中文版</a> </li><li><a href="https://huanglizhuo.gitbooks.io/kotlin-in-chinese/">Kotlin 中文文档</a> <a href="https://github.com/huanglizhuo/kotlin-in-chinese">GitHub</a>   </li><li><a href="http://www.liying-cn.net/kotlin/docs/reference/">Kotlin 参考文档</a></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-primary collapsed" data-toggle="collapse" href="#collapse-0fd7e67b" role="button" aria-expanded="false" aria-controls="collapse-0fd7e67b">        <div class="fold-arrow">▶</div>LaTeX      </div>      <div class="fold-collapse collapse" id="collapse-0fd7e67b">        <div class="fold-content">          <ul><li><a href="http://liam0205.me/2014/09/08/latex-introduction/">一份其实很短的 LaTeX 入门文档</a></li><li><a href="http://www.mohu.org/info/lshort-cn.pdf">一份不太简短的 LATEX 2ε 介绍</a> （PDF版）</li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-ea2bf404" role="button" aria-expanded="false" aria-controls="collapse-ea2bf404">        <div class="fold-arrow">▶</div>Python      </div>      <div class="fold-collapse collapse" id="collapse-ea2bf404">        <div class="fold-content">          <ul><li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰 Python 3 中文教程</a> </li><li><a href="http://www.kancloud.cn/kancloud/python-basic">零基础学 Python 第一版</a></li><li><a href="http://www.kancloud.cn/kancloud/starter-learning-python">零基础学 Python 第二版</a></li><li><a href="http://lovelypython.readthedocs.org/en/latest/">可爱的 Python</a></li><li><a href="http://www.pythondoc.com/pythontutorial27/index.html">Python 2.7 官方教程中文版</a></li><li><a href="http://www.pythondoc.com/pythontutorial3/index.html">Python 3.3 官方教程中文版</a></li><li><a href="http://www.kancloud.cn/thinkphp/python-cookbook">Python Cookbook 中文版</a></li><li><a href="https://github.com/yidao620c/python3-cookbook">Python3 Cookbook 中文版</a></li><li><a href="https://code.google.com/p/zhong-wiki/wiki/PEP8">PEP8 Python代码风格规范</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/">Google Python 风格指南 中文版</a></li><li><a href="http://liam0205.me/2013/11/02/Python-tutorial-zh_cn/">Python入门教程</a> (<a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf">PDF</a>)</li><li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/">笨办法学 Python</a> (<a href="http://liam0205.me/attachment/Python/PyHardWay/Learn_Python_The_Hard_Way_zh-cn.pdf">PDF</a> <a href="https://www.gitbook.com/download/epub/book/wizardforcel/lpthw">EPUB</a>)</li><li><a href="http://liam0205.me/2014/09/11/matplotlib-tutorial-zh-cn/">Python 绘图库 matplotlib 官方指南中文翻译</a></li><li><a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/">Scrapy 0.25 文档</a></li><li><a href="https://github.com/carfly/thinkpython-cn">ThinkPython</a></li><li><a href="https://github.com/bingjin/ThinkPython2-CN">ThinkPython 2ed</a></li><li><a href="http://www.cnblogs.com/vamei/archive/2012/09/13/2682778.html">Python快速教程</a></li><li><a href="http://wiki.ubuntu.org.cn/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97">Python 正则表达式操作指南</a></li><li><a href="http://www.crifan.com/files/doc/docbook/python_beginner_tutorial/release/html/python_beginner_tutorial.html">python初级教程：入门详解</a></li><li><a href="https://www.gitbook.com/book/likebeta/twisted-intro-cn/details">Twisted 与异步编程入门</a> </li><li><a href="http://textgrocery.readthedocs.org/zh/latest/index.html">TextGrocery 中文 API</a> </li><li><a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/">Requests: HTTP for Humans</a></li><li><a href="http://pymotwcn.readthedocs.org/en/latest/index.html">PyMOTW 中文版</a></li><li><a href="http://fabric-chs.readthedocs.org/">Fabric 中文文档</a></li><li><a href="http://beautifulsoup.readthedocs.org/zh_CN/latest/">Beautiful Soup 4.2.0 中文文档</a></li><li><a href="https://legacy.gitbook.com/book/keelii/socket-programming-in-python-cn/details">Python 中的 Socket 编程</a> </li><li><a href="https://docs.huihoo.com/scipy/scipy-zh-cn/index.html">用Python做科学计算</a></li><li><a href="http://www.pythondoc.com/sphinx/index.html">Sphinx 中文文档</a></li><li><a href="https://github.com/cundi/Mastering.Python.Design.Patterns">精通 Python 设计模式</a></li><li><a href="https://github.com/smartFlash/pySecurity">python 安全编程教程</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/sjtu-cs902-courseware/details">程序设计思想与方法</a></li><li><a href="https://github.com/cloga/scipy-lecture-notes_cn">Scipy 讲义</a></li><li><a href="http://old.sebug.net/paper/books/python/%E3%80%8APython%E6%A0%87%E5%87%86%E5%BA%93%E3%80%8B%E4%B8%AD%E6%96%87%E7%89%88.pdf">Python 标准库 中文版</a></li><li><a href="http://pythonguidecn.readthedocs.io/zh/latest/">Python最佳实践指南</a></li><li><a href="https://magic.iswbm.com/preface.html">Python黑魔法手册</a></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-warning collapsed" data-toggle="collapse" href="#collapse-843abf14" role="button" aria-expanded="false" aria-controls="collapse-843abf14">        <div class="fold-arrow">▶</div>Android      </div>      <div class="fold-collapse collapse" id="collapse-843abf14">        <div class="fold-content">          <ul><li><a href="http://www.apkbus.com/design/index.html">Android Design(中文版)</a></li><li><a href="http://wiki.jikexueyuan.com/project/material-design/">Material Design 中文版</a></li><li><a href="http://hukai.me/android-training-course-in-chinese/index.html">Google Android官方培训课程中文版</a></li><li><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/">Android学习之路</a></li><li><a href="https://github.com/bboyfeiyu/android-tech-frontier">Android开发技术前线(android-tech-frontier)</a></li><li><a href="https://github.com/FX-Max/Point-of-Android">Point-of-Android</a></li><li><a href="http://leanote.com/blog/post/561658f938f41126b2000298">Android6.0新特性详解</a></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-primary collapsed" data-toggle="collapse" href="#collapse-6604548b" role="button" aria-expanded="false" aria-controls="collapse-6604548b">        <div class="fold-arrow">▶</div>编译原理      </div>      <div class="fold-collapse collapse" id="collapse-6604548b">        <div class="fold-content">          <ul><li><a href="https://github.com/DeathKing/Learning-SICP">《计算机程序的结构和解释》公开课 翻译项目</a></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-49076d9b" role="button" aria-expanded="false" aria-controls="collapse-49076d9b">        <div class="fold-arrow">▶</div>计算机图形学      </div>      <div class="fold-collapse collapse" id="collapse-49076d9b">        <div class="fold-content">          <ul><li><a href="https://github.com/zilongshanren/opengl-tutorials">OpenGL 教程</a></li><li><a href="https://github.com/QianMo/Real-Time-Rendering-3rd-Summary-Ebook">《Real-Time Rendering 3rd》提炼总结</a></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-warning collapsed" data-toggle="collapse" href="#collapse-1130dbee" role="button" aria-expanded="false" aria-controls="collapse-1130dbee">        <div class="fold-arrow">▶</div>操作系统      </div>      <div class="fold-collapse collapse" id="collapse-1130dbee">        <div class="fold-content">          <ul><li><a href="http://i.linuxtoy.org/docs/guide/index.html">开源世界旅行手册</a></li><li><a href="http://linux.vbird.org/">鸟哥的Linux私房菜</a></li><li><a href="http://billie66.github.io/TLCL/index.html">The Linux Command Line</a> (中英文版)</li><li><a href="http://www.kerneltravel.net/kernel-book">深入分析Linux内核源码</a></li><li><a href="https://github.com/widuu/chinese_docker">Docker中文指南</a></li><li><a href="https://github.com/yeasy/docker_practice">Docker —— 从入门到实践</a></li><li><a href="https://github.com/wsargent/docker-cheat-sheet/tree/master/zh-cn#docker-cheat-sheet">Docker Cheat Sheet</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/">Mac 开发配置手册</a></li><li><a href="https://www.freebsd.org/doc/zh_CN/books/handbook/index.html">FreeBSD 使用手册</a></li><li><a href="http://billie66.github.io/TLCL/book/">Linux 命令行(中文版)</a></li><li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html">Linux 构建指南</a></li><li><a href="https://github.com/me115/linuxtools_rst">Linux工具快速教程</a></li><li><a href="https://github.com/tobegit3hub/understand_linux_process">理解Linux进程</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术</a></li><li><a href="https://spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html">SystemTap新手指南</a></li><li><a href="https://github.com/wizardforcel/think-os-zh">操作系统思考</a></li></ul>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>github🎯</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Normal distribution</title>
    <link href="/Normal%20distribution/"/>
    <url>/Normal%20distribution/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> norm<span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_probability</span>():    mean = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;均值：&quot;</span>))    std_dev = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;标准差：&quot;</span>))    a_value = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;a值: &quot;</span>))    probability = norm.cdf(a_value, mean, std_dev)    <span class="hljs-built_in">print</span>(probability)<span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_a_value</span>():    mean = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;均值：&quot;</span>))    std_dev = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;标准差：&quot;</span>))    p = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;概率值: &quot;</span>))    a_value = norm.ppf(p, mean, std_dev)    <span class="hljs-built_in">print</span>(a_value)<span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_probability_range</span>():    mean = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;均值：&quot;</span>))    std_dev = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;标准差：&quot;</span>))    a_value = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;a值: &quot;</span>))    b_value = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;b值: &quot;</span>))    probability = norm.cdf(b_value, mean, std_dev) - norm.cdf(a_value, mean, std_dev)    <span class="hljs-built_in">print</span>(probability)<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请选择功能：&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1. 输入a,求P(X &lt;= a)的概率&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2. 已知P(X &lt;= a)的概率,求a的值&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3. 求P(a &lt;= X &lt;= b)的概率&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0. 退出&quot;</span>)    choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选项：&quot;</span>)        <span class="hljs-keyword">if</span> choice == <span class="hljs-string">&quot;1&quot;</span>:        calculate_probability()    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;2&quot;</span>:        calculate_a_value()    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;3&quot;</span>:        calculate_probability_range()    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;0&quot;</span>:        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无效的选项，请重新输入。&quot;</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>code💻</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建blog</title>
    <link href="/your-blog/"/>
    <url>/your-blog/</url>
    
    <content type="html"><![CDATA[<!-- 空格符 --><!-- &nbsp;&nbsp;&nbsp; --><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h1><h2 id="1-1-GitHub账号"><a href="#1-1-GitHub账号" class="headerlink" title="1.1 GitHub账号"></a><strong>1.1 GitHub账号</strong></h2><p>需要有一个<code>GitHub</code>账号，没有的话在<a href="https://github.com/">官网</a>注册，可参考<a href="https://blog.csdn.net/yaorongke/article/details/119086305">Github账号申请</a>。</p><h2 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2 安装Git"></a><strong>1.2 安装Git</strong></h2><p>Hexo部署到<code>GitHub</code>时需要用到，可参考<a href="https://blog.csdn.net/yaorongke/article/details/119085413">Git安装(Windows)</a>。</p><h2 id="1-3-安装NodeJs"><a href="#1-3-安装NodeJs" class="headerlink" title="1.3 安装NodeJs"></a><strong>1.3 安装NodeJs</strong></h2><p><code>Hexo</code>是基于<code>NodeJs</code>写的，需要安装<code>NodeJs</code>和<code>npm</code>，可参考<a href="https://blog.csdn.net/qq_40323256/article/details/100825982">NodeJs安装及配置</a>。</p><h1 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a><strong>二、创建仓库</strong></h1><h2 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a><strong>2.1</strong></h2><p>点击<code>new repositories</code>新建一个仓库。</p><html><img src="https://nuyoahwjl.github.io/your-blog/1.png" alt=""style="display: block; margin: 0 auto;"></html><h2 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a><strong>2.2</strong></h2><p>仓库名格式必须为<code>&lt;用户名&gt;.github.io</code>，然后下滑点击<code>Create repository</code>。</p><html><img src="https://nuyoahwjl.github.io/your-blog/2.png" alt=""style="display: block; margin: 0 auto;"></html><h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a><strong>2.3</strong></h2><p>点击<code>creating a new file</code>创建一个新文件，作为主页。</p><html><img src="https://nuyoahwjl.github.io/your-blog/3.png" alt=""style="display: block; margin: 0 auto;"></html><h2 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a><strong>2.4</strong></h2><p>新文件名字必须为<code>index.html</code>，内容先随便写一个简单的，示例如下，填写之后点击<code>Commit new file</code>提交。</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HLxxx01<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>HLxxx01&#x27;s blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><html><img src="https://nuyoahwjl.github.io/your-blog/4.png" alt=""style="display: block; margin: 0 auto;"></html><h2 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a><strong>2.5</strong></h2><p>在<code>GitHub Pages</code>中找到我们主页的地址为 hlxxx01.github.io，在浏览器中访问(这里只是为了演示<code>Github Pages</code>的使用)。</p><html><img src="https://nuyoahwjl.github.io/your-blog/5.png" alt=""style="display: block; margin: 0 auto;"></html><h2 id="2-6"><a href="#2-6" class="headerlink" title="2.6"></a><strong>2.6</strong></h2><p>预览。</p><html><img src="https://nuyoahwjl.github.io/your-blog/6.png" alt=""style="display: block; margin: 0 auto;"></html><h1 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a><strong>三、安装Hexo</strong></h1><div class="note note-warning">            <p>以下内容均需在命令行提示符<code>cmd</code>中运行。<br>‘win + R ’ 打开命令行窗口，输入 ‘cmd’ 并回车。</p>          </div><h2 id="3-1-安装Hexo"><a href="#3-1-安装Hexo" class="headerlink" title="3.1 安装Hexo"></a><strong>3.1</strong> 安装<code>Hexo</code></h2><div class="code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli</code></pre></div><h2 id="3-2-创建hexo-blog项目"><a href="#3-2-创建hexo-blog项目" class="headerlink" title="3.2 创建hexo-blog项目"></a><strong>3.2</strong> 创建<code>hexo-blog</code>项目</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo init hexo-blog<span class="hljs-built_in">cd</span> hexo-blognpm install//项目名称自拟//默认在C盘创建</code></pre></div><h2 id="3-3-本地启动"><a href="#3-3-本地启动" class="headerlink" title="3.3 本地启动"></a><strong>3.3</strong> 本地启动</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo ghexo server</code></pre></div><p>浏览器访问 localhost:4000，查看默认风格。</p><html><img src="https://nuyoahwjl.github.io/your-blog/7.png" alt=""style="display: block; margin: 0 auto;"></html><h1 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a><strong>四、更换主题</strong></h1><div class="note note-warning">            <p><code>Hexo</code>默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点<a href="https://hexo.io/themes/">这里</a>查看。个人比较喜欢<code>Fluid</code>，后面章节的功能也是以<code>Fluid</code>为基础进行讲解的。</p>          </div><h2 id="4-1-安装主题"><a href="#4-1-安装主题" class="headerlink" title="4.1 安装主题"></a><strong>4.1 安装主题</strong></h2><p>下载<a href="https://gitcode.com/fluid-dev/hexo-theme-fluid/releases?utm_source=csdn_github_accelerator&isLogin=1">最新release版本</a>解压到<code>themes</code>目录，并将解压出的文件夹重命名为<code>fluid</code>。</p><h2 id="4-2-指定主题"><a href="#4-2-指定主题" class="headerlink" title="4.2 指定主题"></a><strong>4.2 指定主题</strong></h2><p>如下修改<code>Hexo</code>博客目录中的<code>_config.yml</code>：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言</span></code></pre></div><h2 id="4-3-本地启动"><a href="#4-3-本地启动" class="headerlink" title="4.3 本地启动"></a><strong>4.3 本地启动</strong></h2><div class="code-wrapper"><pre><code class="hljs bash">hexo g -dhexo s</code></pre></div><p>浏览器访问 localhost:4000，查看<code>fluid</code>风格。</p><html><img src="https://nuyoahwjl.github.io/your-blog/8.png" alt=""style="display: block; margin: 0 auto;"></html><h2 id="4-4-创建文章"><a href="#4-4-创建文章" class="headerlink" title="4.4 创建文章"></a><strong>4.4 创建文章</strong></h2><p>如下修改<code>Hexo</code>博客目录中的<code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre></div><p>在<code>cmd</code>窗口执行如下命令创建一篇新文章，名为《测试文章》。</p><div class="code-wrapper"><pre><code class="hljs bash">hexo new post 测试文章</code></pre></div><ul><li><strong>个性化：<a href="#523-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95">post页配置指南</a></strong></li></ul><h1 id="五、配置指南"><a href="#五、配置指南" class="headerlink" title="五、配置指南"></a><strong>五、配置指南</strong></h1><h2 id="5-1-关于指南"><a href="#5-1-关于指南" class="headerlink" title="5.1 关于指南"></a><strong>5.1 关于指南</strong></h2><div class="note note-success">            <ul><li>本指南中提到的：”站点配置” 指的<code>Hexo</code>博客目录下的<code>_config.yml</code>，”主题配置” 指的是<code>theme/fluid/_config.yml</code>或者 <code>_config.fluid.yml</code>，注意区分；</li><li>本指南中提到的<code>source</code>目录都指的是博客目录下的<code>source</code>文件夹，不推荐修改主题内<code>source</code>目录；</li><li>每次无论<code>hexo g</code>或<code>hexo s</code>，都最好先使用<code>hexo clean</code>清除本地缓存；</li><li>页面结果以本地<code>hexo s</code>为准，部署后的异常大部分是线上缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；</li></ul>          </div><h2 id="5-2-全局"><a href="#5-2-全局" class="headerlink" title="5.2 全局"></a><strong>5.2 全局</strong></h2><h3 id="5-2-1-博客标题"><a href="#5-2-1-博客标题" class="headerlink" title="5.2.1 博客标题"></a><strong>5.2.1 博客标题</strong></h3><p>页面左上角的博客标题，默认使用<u><strong>站点配置</strong></u>中的<code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。<br>如需单独区别设置，可在<u><strong>主题配置</strong></u>中设置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">博客标题</span></code></pre></div><h3 id="5-2-2-页面顶部大图"><a href="#5-2-2-页面顶部大图" class="headerlink" title="5.2.2 页面顶部大图"></a><strong>5.2.2 页面顶部大图</strong></h3><h4 id="图片来源："><a href="#图片来源：" class="headerlink" title="图片来源："></a><em>图片来源：</em></h4><p><u><strong>主题配置</strong></u>中，每个页面都有名为<code>banner_img</code>的属性，可以使用本地图片的相对路径，也可以为外站链接，比如：<br><br>指向本地图片：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example.jpg</span>   <span class="hljs-comment"># 对应存放在 /source/img/bg/example.jpg</span></code></pre></div><p>指向外站链接：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://static.zkqiang.cn/example.jpg</span></code></pre></div><div class="note note-success">            <p>如果是本地图片，目录文件夹可自定义，但必须在<code>source</code>目录下，博客与主题的<code>source</code>目录最终会合并，因此优先选择博客的 <code>source</code>。<br>图片大小建议压缩到 1MB 以内，否则会严重拖慢页面加载。</p>          </div><h4 id="高度："><a href="#高度：" class="headerlink" title="高度："></a><em>高度：</em></h4><p><u><strong>主题配置</strong></u>中，每个页面对应的<code>banner_img_height</code>属性，有效值为 0 - 100。100 即为全屏，个人建议 70 以上。</p><h4 id="蒙版透明度："><a href="#蒙版透明度：" class="headerlink" title="蒙版透明度："></a><em>蒙版透明度：</em></h4><p><u><strong>主题配置</strong></u>中，每个页面对应的<code>banner_mask_alpha</code>属性，有效值为 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明。</p><div class="note note-success">            <p>每篇文章可单独设置<code>Banner</code>，具体见文章页设置。</p><p>本主题不支持固定背景（fixed），原因：<br>1.与目前代码结构有较大冲突，需要大量修改。<br>2.<code>fixed</code>在移动端兼容性很差。</p>          </div><h3 id="5-2-3-导航菜单"><a href="#5-2-3-导航菜单" class="headerlink" title="5.2.3 导航菜单"></a><strong>5.2.3 导航菜单</strong></h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span>  <span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-home-fill&#x27;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;tag&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/tags/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-tags-fill&#x27;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;about&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/about/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-user-fill&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;联系我&#x27;</span> &#125;</code></pre></div><ul><li><code>key</code>: 用于关联有<a href="#44-%E5%88%9B%E5%BB%BA%E5%85%B3%E4%BA%8E%E9%A1%B5">语言配置</a>，如不存在关联则显示<code>key</code>本身的值</li><li><code>link</code>: 跳转链接</li><li><code>icon</code>: 图标的 css class，可以省略（即没有图标），主题内置图标详见<a href="https://nuyoahwjl.github.io/your-blog/9.png">这里</a></li><li><code>name</code>: 强制使用此名称显示（不再按语言配置显示），可省略</li></ul><p>另外支持二级菜单（下拉菜单），配置写法如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span>  <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;文档&#x27;</span>,      <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-books&#x27;</span>,      <span class="hljs-attr">submenu:</span> [        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;主题博客&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/&#x27;</span> &#125;,        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;配置指南&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/guide/&#x27;</span> &#125;,        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;图标用法&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/icon/&#x27;</span> &#125;      ]  &#125;</code></pre></div><h3 id="5-2-4-懒加载"><a href="#5-2-4-懒加载" class="headerlink" title="5.2.4 懒加载"></a><strong>5.2.4 懒加载</strong></h3><p>懒加载又称延迟加载。开启后，当图片或评论插件滚动到可见范围内才会加载，可以大幅提高打开网页的速度。</p><p>该功能默认开启，可以在<u><strong>主题配置</strong></u>中修改参数：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">lazyload:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">loading_img:</span> <span class="hljs-string">/img/loading.gif</span>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">offset_factor:</span> <span class="hljs-number">2</span></code></pre></div><p><code>loading_img</code>: 指定加载时的占位图片。</p><p><code>onlypost</code>: 为 true 时，懒加载仅在文章页生效，如果自定义页面需要使用，可以在<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>里指定 <code>lazyload: true</code>。</p><p><code>offset_factor</code>: 触发加载的偏移倍数，基数是视窗高度（即提前 N 屏高度触发加载），可根据部署环境的请求速度调节。</p><h3 id="5-2-5-全局字体"><a href="#5-2-5-全局字体" class="headerlink" title="5.2.5 全局字体"></a><strong>5.2.5 全局字体</strong></h3><p>所有页面统一字体的字号和字族可以通过<u><strong>主题配置</strong></u>中的下列配置项设置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">font:</span>  <span class="hljs-comment"># 主题字体配置</span>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span>        <span class="hljs-comment"># 全局字号</span>  <span class="hljs-attr">font_family:</span>           <span class="hljs-comment"># 全局字体族</span>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span>    <span class="hljs-comment"># 代码的字号</span></code></pre></div><p>关于字体族（<code>font-family</code>）如果不了解可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family">这篇文章</a>先了解一下。</p><p>需要注意：</p><ul><li>最好使用系统自带的字体，否则需要通过<a href="#528-%E8%87%AA%E5%AE%9A%E4%B9%89-js--css--html">自定义功能</a>额外引入<code>@font-face</code>，字体一般较大，不建议引入</li><li>应当至少添加一个通用的字体族名（如<code>serif</code>，具体见上方链接文章）</li></ul><p>如果想设置单独的页面，可以直接在 markdown 里通过 style 标签实现：</p><div class="code-wrapper"><pre><code class="hljs html">---title: example---<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">  <span class="hljs-comment">/* 设置整个页面的字体 */</span></span><span class="language-css">  <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-class">.markdown-body</span> &#123;</span><span class="language-css">    <span class="hljs-attribute">font-family</span>: KaiTi,<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>,Georgia, sans, serif;</span><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><span class="language-css">  &#125;</span><span class="language-css"></span><span class="language-css">  <span class="hljs-comment">/* 只设置 markdown 字体 */</span></span><span class="language-css">  <span class="hljs-selector-class">.markdown-body</span> &#123;</span><span class="language-css">    <span class="hljs-attribute">font-family</span>: KaiTi,<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>,Georgia, sans, serif;</span><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><span class="language-css">  &#125;</span><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div><h3 id="5-2-6-网页统计"><a href="#5-2-6-网页统计" class="headerlink" title="5.2.6 网页统计"></a><strong>5.2.6 网页统计</strong></h3><div class="note note-success">            <p>统计数据来源，使用 leancloud 需要设置 <code>web_analytics: leancloud</code> 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定。<br>本文使用leanclou。</p>          </div><h4 id="step1-申请LeanCloud账号并创建应用"><a href="#step1-申请LeanCloud账号并创建应用" class="headerlink" title="step1 申请LeanCloud账号并创建应用"></a><em>step1 申请LeanCloud账号并创建应用</em></h4><p>进入<a href="https://console.leancloud.cn/">官网</a>注册账号。<br><br>注册成功后实名认证并绑定邮箱。</p><html><img src="https://nuyoahwjl.github.io/your-blog/10.png" alt=""style="display: block; margin: 0 auto;"></html><h4 id="step2-创建应用，选择开发版即可"><a href="#step2-创建应用，选择开发版即可" class="headerlink" title="step2 创建应用，选择开发版即可"></a><em>step2 创建应用，选择<code>开发版</code>即可</em></h4><html><img src="https://nuyoahwjl.github.io/your-blog/11.png" alt=""style="display: block; margin: 0 auto;"></html><h4 id="step3-进入该应用的设置-应用凭证"><a href="#step3-进入该应用的设置-应用凭证" class="headerlink" title="step3 进入该应用的设置-&gt;应用凭证"></a><em>step3 进入该应用的<code>设置-&gt;应用凭证</code></em></h4><p>找到<code>AppID</code>、<code>AppKey</code>、<code>API</code>，记录下来，后面配置要用。</p><html><img src="https://nuyoahwjl.github.io/your-blog/12.png" alt=""style="display: block; margin: 0 auto;"></html><h4 id="step4-修改Fluid配置"><a href="#step4-修改Fluid配置" class="headerlink" title="step4 修改Fluid配置"></a><em>step4 修改Fluid配置</em></h4><p>打开主题目录<code>themes\fluid</code>下的<code>_config.yml</code>文件，修改如下配置:</p><p>打开统计开关</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 网页访问统计</span><span class="hljs-attr">web_analytics:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 遵循访客浏览器&quot;请勿追踪&quot;的设置，如果开启则不统计其访问</span>    <span class="hljs-comment"># See: https://www.w3.org/TR/tracking-dnt/</span>    <span class="hljs-attr">follow_dnt:</span> <span class="hljs-literal">true</span></code></pre></div><p>配置<code>leancloud</code>的<code>app_id</code>、<code>AppKey</code>、<code>API</code></p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><span class="hljs-attr">leancloud:</span>    <span class="hljs-attr">app_id:</span>     <span class="hljs-attr">app_key:</span>     <span class="hljs-comment"># REST API 服务器地址，国际版不填</span>    <span class="hljs-attr">server_url:</span>     <span class="hljs-comment"># 统计页面时获取路径的属性</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">false</span></code></pre></div><p>展示网站的 PV、UV 统计数</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><span class="hljs-comment"># Display website PV and UV statistics</span><span class="hljs-attr">statistics:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># Options: busuanzi | leancloud</span>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>      <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&#x27;🚀总访问量 &#123;&#125; 次&#x27;</span>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&#x27;😶‍🌫️总访客数 &#123;&#125; 人&#x27;</span></code></pre></div><h3 id="5-2-7-语言配置"><a href="#5-2-7-语言配置" class="headerlink" title="5.2.7 语言配置"></a><strong>5.2.7 语言配置</strong></h3><p>设置语言是在<u><strong>站点配置</strong></u>中，需要对应<code>fluid/languages/</code>目录内的配置文件名:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span></code></pre></div><p>你可以在主题<a href="https://github.com/fluid-dev/hexo-theme-fluid/tree/master/languages">languages</a>目录里查看支持哪些语言，只要上面的配置的值和文件名相同即可。</p><h3 id="5-2-8-自定义-JS-CSS-HTML"><a href="#5-2-8-自定义-JS-CSS-HTML" class="headerlink" title="5.2.8 自定义 JS &#x2F; CSS &#x2F; HTML"></a><strong>5.2.8 自定义 JS &#x2F; CSS &#x2F; HTML</strong></h3><p>如果你想引入外部的 JS、CSS（比如 IconFont）或 HTML，可以通过以下<u><strong>主题配置</strong></u>，具体见注释：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 指定自定义 js 文件路径，路径是相对 source 目录</span><span class="hljs-attr">custom_js:</span> <span class="hljs-string">/js/custom.js</span><span class="hljs-comment"># 指定自定义 css 文件路径，路径是相对 source 目录</span><span class="hljs-attr">custom_css:</span> <span class="hljs-string">/css/custom.css</span><span class="hljs-comment"># 自定义 &lt;head&gt; 节点中的 HTML 内容</span><span class="hljs-attr">custom_head:</span> <span class="hljs-string">&#x27;&lt;meta name=&quot;key&quot; content=&quot;value&quot;&gt;&#x27;</span><span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），也可用于外部引入 js css 这些操作，注意不要和 post.custom 配置冲突</span><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;//at.alicdn.com/t/font_1067060_qzomjdt8bmp.css&quot;&gt;&#x27;</span></code></pre></div><p>另外<code>custom_js</code>和<code>custom_css</code>都可以指定多个路径：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom.css</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_ijqayz9ro8k.css</span></code></pre></div><h3 id="5-2-9-暗色模式"><a href="#5-2-9-暗色模式" class="headerlink" title="5.2.9 暗色模式"></a><strong>5.2.9 暗色模式</strong></h3><p>主题暗色模式，开启后菜单中会出现切换按钮。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">dark_mode:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span></code></pre></div><p><code>default</code>是暗色默认的模式，可选参数：<code>auto</code>&#x2F;<code>light</code>&#x2F;<code>dark</code>。</p><p>选择<code>auto</code>时优先遵循 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme</a>，如果不支持则按用户本地时间 18 点到次日 6 点之间进入暗色模式。</p><h2 id="5-3-首页"><a href="#5-3-首页" class="headerlink" title="5.3 首页"></a><strong>5.3 首页</strong></h2><h3 id="5-3-1-Slogan-打字机"><a href="#5-3-1-Slogan-打字机" class="headerlink" title="5.3.1 Slogan(打字机)"></a><strong>5.3.1 Slogan(打字机)</strong></h3><p>首页大图中的标题文字，可在<u><strong>主题配置</strong></u>中设定是否开启：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">slogan:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">text:</span> <span class="hljs-string">这是一条</span> <span class="hljs-string">Slogan</span>    <span class="hljs-attr">api:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span>      <span class="hljs-attr">headers:</span> &#123;&#125;      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]</code></pre></div><p>如果<code>text</code>为空则按站点配置的<code>subtitle</code>显示。</p><p>另外支持通过API接口获取内容，如果请求失败则按<code>text</code>字段显示：</p><ul><li><p><code>url</code>: API 地址，必须返回的是一个JSON格式</p></li><li><p><code>method</code>: 请求方法，可选<code>GET</code>、<code>POST</code>、<code>PUT</code></p></li><li><p><code>headers</code>: 请求头，如果接口需要传一些验证的头部信息，在这里设置</p></li><li><p><code>keys</code>: 从请求结果获取字符串的取值字段，程序会根据列表中的字段依次取值，最终需要获得到一个字符串</p></li></ul><p>例如 API 返回的内容为：</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>    <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fluid&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;An elegant theme&quot;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test content&quot;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span></code></pre></div><p>设置<code>keys: [&quot;data&quot;, &quot;content&quot;]</code>，程序会如下执行：</p><ul><li>由于返回体是列表，程序会首先获取第一个元素（不是列表则跳过此步骤）</li><li>通过第一个 key<code>data</code>获取值，发现不是一个字符串，继续执行</li><li>通过第二个 key<code>content</code>获取值，发现是一个字符串，返回内容；如果不是字符串则获取失败，使用text值</li></ul><p>标题文字默认开启了打字机动效，相关配置如下:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">fun_features:</span>  <span class="hljs-attr">typing:</span> <span class="hljs-comment"># 为 subtitle 添加打字机效果</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span> <span class="hljs-comment"># 打印速度</span>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-comment"># 游标字符</span>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否循环播放效果</span></code></pre></div><div class="note note-success">            <p>请求 API 的功能必须同时开启打字机动效才能生效</p>          </div><h3 id="5-3-2-文章摘要"><a href="#5-3-2-文章摘要" class="headerlink" title="5.3.2 文章摘要"></a><strong>5.3.2 文章摘要</strong></h3><p>开关自动摘要（默认开启）：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">auto_excerpt:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span></code></pre></div><p>若要手动指定摘要，使用<code>&lt;!-- more --&gt;</code>在MD文档里划分，如：</p><div class="code-wrapper"><pre><code class="hljs md">正文的一部分作为摘要&lt;!-- more --&gt;余下的正文</code></pre></div><p>或者在<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>里设置<code>excerpt</code>字段，如：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><span class="hljs-meta">---</span></code></pre></div><div class="note note-success">            <p>优先级: 手动摘要 &gt; 自动摘要；<br>如果关闭自动摘要，并且没有设置手动摘要，摘要区域空白；<br>无论哪种摘要都最多显示 3 行，当屏幕宽度不足时会隐藏部分摘要。</p>          </div><h3 id="5-3-3-文章跳转方式"><a href="#5-3-3-文章跳转方式" class="headerlink" title="5.3.3 文章跳转方式"></a><strong>5.3.3 文章跳转方式</strong></h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>    <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span></code></pre></div><p>可选值:</p><ul><li><code>_blank</code> 新标签页打开</li><li><code>_self</code> 当前标签页打开</li></ul><h3 id="5-3-4-文章信息"><a href="#5-3-4-文章信息" class="headerlink" title="5.3.4 文章信息"></a><strong>5.3.4 文章信息</strong></h3><p>可配置隐藏包括发布时间、分类、标签。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">post_meta:</span>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span></code></pre></div><h3 id="5-3-5-文章排序"><a href="#5-3-5-文章排序" class="headerlink" title="5.3.5 文章排序"></a><strong>5.3.5 文章排序</strong></h3><p>如果想手动将某些文章固定在首页靠前的位置，可以在安装 <code>hexo-generator-index</code>&gt;&#x3D;2.0.0 版本的情况下，在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置<code>sticky</code>属性：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre></div><p><code>sticky</code>数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序。</p><h3 id="5-3-6-隐藏文章"><a href="#5-3-6-隐藏文章" class="headerlink" title="5.3.6 隐藏文章"></a><strong>5.3.6 隐藏文章</strong></h3><p>如果想把某些文章隐藏，不在首页和其他归档分类页里展示，可以在文章开头<a href="https://hexo.io/zh-cn/docs/front-matter">ront-matter</a>中配置<code>hide: true</code>属性。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre></div><p>如果只是想让文章在首页隐藏，但仍需要在归档分类页里展示，可以在文章开头<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置<code>archive: true</code>属性。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-attr">archive:</span> <span class="hljs-literal">true</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre></div><h2 id="5-4-文章页"><a href="#5-4-文章页" class="headerlink" title="5.4 文章页"></a><strong>5.4 文章页</strong></h2><h3 id="5-4-1-文章在首页的封面图"><a href="#5-4-1-文章在首页的封面图" class="headerlink" title="5.4.1 文章在首页的封面图"></a><strong>5.4.1 文章在首页的封面图</strong></h3><p>对于单篇文章，在文章开头<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置<code>index_img</code>属性。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre></div><p>和Banner配置相同，<code>/img/example.jpg</code>对应的是存放在<code>/source/img/example.jpg</code>目录下的图片，也可以使用外链<code>Url</code>的绝对路径。</p><p>如果想统一给文章设置一个默认图片（文章不设置<code>index_img</code>则默认使用这张图片），可在<u><strong>主题配置</strong></u>中设置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>    <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/example.jpg</span></code></pre></div><p>当<code>default_index_img</code>和<code>index_img</code>都为空时，该文章在首页将不显示图片。</p><h3 id="5-4-2-文章页顶部大图"><a href="#5-4-2-文章页顶部大图" class="headerlink" title="5.4.2 文章页顶部大图"></a><strong>5.4.2 文章页顶部大图</strong></h3><p>默认显示<u><strong>主题配置</strong></u>中的<code>post.banner_img</code>，如需要设置单个文章的Banner，在<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中指定<code>banner_img</code>属性。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre></div><h3 id="5-4-3-日期-字数-阅读时长-阅读数"><a href="#5-4-3-日期-字数-阅读时长-阅读数" class="headerlink" title="5.4.3 日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数"></a><strong>5.4.3 日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数</strong></h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">meta:</span>    <span class="hljs-attr">author:</span>  <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">date:</span>  <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span>    <span class="hljs-attr">wordcount:</span>  <span class="hljs-comment"># 字数统计</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span>    <span class="hljs-attr">min2read:</span>  <span class="hljs-comment"># 阅读时间</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span>    <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span></code></pre></div><h3 id="5-4-4-代码块"><a href="#5-4-4-代码块" class="headerlink" title="5.4.4 代码块"></a><strong>5.4.4 代码块</strong></h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">code:</span>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">highlight:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span>    <span class="hljs-attr">highlightjs:</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&#x27;Github Gist&#x27;</span>      <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">prismjs:</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span></code></pre></div><ul><li><code>copy_btn</code>: 是否开启复制代码的按钮</li><li><code>line_number</code>: 是否开启行号</li><li><code>highlight</code>: 是否开启代码高亮</li><li><code>lib</code>: 选择生成高亮的库，可选项: highlightjs、prismjs</li></ul><h3 id="5-4-5-脚注"><a href="#5-4-5-脚注" class="headerlink" title="5.4.5 脚注"></a><strong>5.4.5 脚注</strong></h3><p>主题内置了脚注语法支持，可以在文章末尾自动生成带有锚点的脚注，该功能在<u><strong>主题配置</strong></u>中默认开启：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">footnote:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span></code></pre></div><p>脚注语法如下：</p><div class="code-wrapper"><pre><code class="hljs md">这是一句话[^1][<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span></code></pre></div><p>更优雅的使用方式，是将脚注写在文末，比如：</p><div class="code-wrapper"><pre><code class="hljs md">正文<span class="hljs-section">## 参考</span>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span></code></pre></div><h3 id="5-4-6-Tag插件"><a href="#5-4-6-Tag插件" class="headerlink" title="5.4.6 Tag插件"></a><strong>5.4.6 Tag插件</strong></h3><h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a><em>便签</em></h4><p>在 markdown 中加入如下的代码来使用便签：</p><div class="code-wrapper"><pre><code class="hljs md">&#123;% note success %&#125;文字 或者 <span class="hljs-code">`markdown`</span> 均可&#123;% endnote %&#125;</code></pre></div><p>或者使用 HTML 形式：</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre></div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-926ff4dd" role="button" aria-expanded="false" aria-controls="collapse-926ff4dd">        <div class="fold-arrow">▶</div>可选便签      </div>      <div class="fold-collapse collapse" id="collapse-926ff4dd">        <div class="fold-content">          <div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div>        </div>      </div>    </div><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a><em>行内标签</em></h4><p>在 markdown 中加入如下的代码来使用 Label：</p><div class="code-wrapper"><pre><code class="hljs md">&#123;% label primary @text %&#125;</code></pre></div><p>或者使用 HTML 形式：</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre></div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-58059ffa" role="button" aria-expanded="false" aria-controls="collapse-58059ffa">        <div class="fold-arrow">▶</div>可选Label      </div>      <div class="fold-collapse collapse" id="collapse-58059ffa">        <div class="fold-content">          <p><span class="label label-primary">primary</span><br><span class="label label-default">default</span><br><span class="label label-info">info</span><br><span class="label label-success">success</span><br><span class="label label-warning">warning</span><br><span class="label label-danger">danger</span></p>        </div>      </div>    </div><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a><em>按钮</em></h4><p>在 markdown 中加入如下的代码来使用 Button：</p><div class="code-wrapper"><pre><code class="hljs md">&#123;% btn url, text, title %&#125;</code></pre></div><p>或者使用 HTML 形式：</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><ul><li><code>url</code>：跳转链接</li><li><code>text</code>：显示的文字</li><li><code>title</code>：鼠标悬停时显示的文字（可选）</li></ul><h4 id="组图"><a href="#组图" class="headerlink" title="组图"></a><em>组图</em></h4><p>如果想把多张图片按一定布局组合显示，你可以在 markdown 中按如下格式：</p><div class="code-wrapper"><pre><code class="hljs md">&#123;% gi total n1-n2-... %&#125;  ![](<span class="hljs-link">url</span>)  ![](<span class="hljs-link">url</span>)  ![](<span class="hljs-link">url</span>)  ![](<span class="hljs-link">url</span>)  ![](<span class="hljs-link">url</span>)&#123;% endgi %&#125;</code></pre></div><ul><li><code>total</code>：图片总数量，对应中间包含的图片 url 数量</li><li><code>n1-n2-...</code>：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</li></ul><h2 id="5-5-归档页"><a href="#5-5-归档页" class="headerlink" title="5.5 归档页"></a><strong>5.5 归档页</strong></h2><p>具体见配置文件注释</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;</code></pre></div><h2 id="5-6-分类页"><a href="#5-6-分类页" class="headerlink" title="5.6 分类页"></a><strong>5.6 分类页</strong></h2><p>具体见配置文件注释</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;</code></pre></div><h2 id="5-7-标签页"><a href="#5-7-标签页" class="headerlink" title="5.7 标签页"></a><strong>5.7 标签页</strong></h2><p>具体见配置文件注释</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span>     <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;</code></pre></div><h2 id="5-8-关于页"><a href="#5-8-关于页" class="headerlink" title="5.8 关于页"></a><strong>5.8 关于页</strong></h2><h3 id="5-8-1-创建关于页"><a href="#5-8-1-创建关于页" class="headerlink" title="5.8.1 创建关于页"></a><strong>5.8.1 创建关于页</strong></h3><p>首次使用主题的「关于页」需要手动创建，在<code>cmd</code>窗口执行：</p><div class="code-wrapper"><pre><code class="hljs bash">hexo new page about</code></pre></div><p>创建成功后，编辑博客目录下<code>/source/about/index.md</code>，添加<code>layout</code>属性:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><span class="hljs-attr">date:</span> <span class="hljs-number">2024-04-21 19:20:33</span><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><span class="hljs-meta">---</span><span class="hljs-meta"></span><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span></code></pre></div><h3 id="5-8-2-关于信息"><a href="#5-8-2-关于信息" class="headerlink" title="5.8.2 关于信息"></a><strong>5.8.2 关于信息</strong></h3><p>在关于页介绍自己的基础信息，可以在<u><strong>主题配置</strong></u>中设置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span></code></pre></div><h3 id="5-8-3-社交页图标"><a href="#5-8-3-社交页图标" class="headerlink" title="5.8.3 社交页图标"></a><strong>5.8.3 社交页图标</strong></h3><h4 id="内置图标"><a href="#内置图标" class="headerlink" title="内置图标"></a><em>内置图标</em></h4><p>在<u><strong>主题配置</strong></u>中设置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span>  <span class="hljs-attr">icons:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-github-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://github.com&#x27;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&#x27;GitHub&#x27;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-douban-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://douban.com&#x27;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&#x27;豆瓣&#x27;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-wechat-fill&#x27;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span> &#125;</code></pre></div><ul><li><code>class</code>: 图标的 css class，主题内置图标详见<a href="https://nuyoahwjl.github.io/your-blog/9.png">这里</a></li><li><code>link</code>: 跳转链接</li><li><code>tip</code>: 鼠标悬浮在图标上显示的提示文字</li><li><code>qrcode</code>: 二维码图片，当使用此字段后，点击不再跳转，而是悬浮二维码</li></ul><h4 id="自定义图标"><a href="#自定义图标" class="headerlink" title="自定义图标"></a><em>自定义图标</em></h4><p><a href="https://www.iconfont.cn/">Iconfont</a>支持用户创建项目来管理和使用图标库，在<code>图标管理-我的项目</code>中即可管理和创建项目。将所需图标添加至购物车，再通过购物车添加至所创建的项目中。在项目中可以下载至本地与生成在线链接，Iconfont 支持在阿里云的 CDN 中生成 CSS 或 JS 文件用来调用。</p><p>生成在线链接后，将链接替换到<u><strong>主题配置</strong></u>的 iconfont 配置项中，但注意替换后<strong>原内置的图标库将全部失效</strong>。</p><p>在每次有删减项目中图标库目录时，需要点击重新生成链接并替换到配置链接。</p><h2 id="5-9-友情链接页"><a href="#5-9-友情链接页" class="headerlink" title="5.9 友情链接页"></a><strong>5.9 友情链接页</strong></h2><p>友情链接页用于展示好友的博客入口，默认关闭，开启需要先在<code>navbar</code>项中<code>links</code>的注释(#号)删掉：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span>  <span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;links&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/links/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-link-fill&#x27;</span> &#125;</code></pre></div><p>然后找到<code>links</code>的配置项，对页面内容进行配置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span>  <span class="hljs-attr">items:</span>    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Fluid Docs&#x27;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&#x27;主题使用指南&#x27;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/&#x27;</span>,      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span>    &#125;  <span class="hljs-attr">default_avatar:</span> <span class="hljs-string">/img/avatar.png</span></code></pre></div><ul><li><code>title</code>: 友链站的标题</li><li><code>intro</code>: 站点或博主的简介，可省略</li><li><code>link</code>: 跳转链接</li><li><code>avatar</code>: 头像图片，可省略</li><li><code>default_avatar</code>: 成员的默认头像(仅在指定了头像并且加载失败时生效)</li></ul><h2 id="5-10-404页"><a href="#5-10-404页" class="headerlink" title="5.10 404页"></a><strong>5.10 404页</strong></h2><p>404 页是在访问不存在的博客链接时，出现的错误提示页面。</p><p>开启此页面需要在博客的部署环境上配置：</p><ul><li>如果博客部署在云服务器，需要 Nginx 配置文件设置<code>error_page 404 = /404.html</code></li><li>如果部署在 GitHub Pages 上，不需要额外配置，但必须绑定顶级域名才生效</li><li>其他 OSS 等平台，请参考各平台关于 404 页的配置文档，但并不是所有平台都支持跳转 Html。</li></ul><h1 id="六、发布到GitHub-Pages"><a href="#六、发布到GitHub-Pages" class="headerlink" title="六、发布到GitHub Pages"></a><strong>六、发布到GitHub Pages</strong></h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a><strong>方式一</strong></h2><p>安装hexo-deployer-git</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><p>修改根目录下的<code>_config.yml</code>，配置<code>GitHub</code>相关信息</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/Nuyoahwjl/Nuyoahwjl.github.io.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span>  <span class="hljs-attr">token:</span> <span class="hljs-string">你的token</span></code></pre></div><p><code>token</code>为<code>GitHub</code>的<code>Personal access tokens</code>，获取方式如下图</p><html><img src="https://nuyoahwjl.github.io/your-blog/13.png" alt=""style="display: block; margin: 0 auto;"></html><p>部署到GitHub</p><div class="code-wrapper"><pre><code class="hljs bash">hexo g -d</code></pre></div><p>浏览器访问<code>GitHub Pages</code>，部署成功</p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a><strong>方式二</strong></h2><p>直接将<code>public</code>目录中的文件和目录推送至<code>GitHub</code>仓库和分支中。</p>]]></content>
    
    
    <categories>
      
      <category>blog📚</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>scrcpy</title>
    <link href="/scrcpy/"/>
    <url>/scrcpy/</url>
    
    <content type="html"><![CDATA[<p><code>scrcpy</code> 是一个开源的应用程序，可以让你通过电脑控制和显示Android设备的屏幕。这里是如何在Windows系统上安装 <code>scrcpy</code> 的步骤：</p><h2 id="1-下载和安装Scoop（如果你还没有Scoop）："><a href="#1-下载和安装Scoop（如果你还没有Scoop）：" class="headerlink" title="1. 下载和安装Scoop（如果你还没有Scoop）："></a>1. <strong>下载和安装Scoop</strong>（如果你还没有Scoop）：</h2><p>   打开命令提示符（CMD）并运行以下命令安装 Scoop（首先需要确保已启用PowerShell的执行策略）：</p><div class="code-wrapper"><pre><code class="hljs bash">Set-ExecutionPolicy RemoteSigned -Scope CurrentUseriwr -useb get.scoop.sh | iex</code></pre></div><h2 id="2-通过Scoop安装scrcpy："><a href="#2-通过Scoop安装scrcpy：" class="headerlink" title="2. 通过Scoop安装scrcpy："></a>2. <strong>通过Scoop安装scrcpy</strong>：</h2><p>   在命令提示符中运行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">scoop install scrcpy</code></pre></div><h2 id="3-安装ADB（如果还没安装）："><a href="#3-安装ADB（如果还没安装）：" class="headerlink" title="3. 安装ADB（如果还没安装）："></a>3. <strong>安装ADB</strong>（如果还没安装）：</h2><div class="code-wrapper"><pre><code class="hljs bash">scoop install adb</code></pre></div><h2 id="4-开启“USB调试”"><a href="#4-开启“USB调试”" class="headerlink" title="4. 开启“USB调试”"></a>4. <strong>开启“USB调试”</strong></h2><p>   确保在连接设备前在Android设备上开启了USB调试模式，通常在“设置” -&gt; “系统” -&gt; “关于手机”里连续点击“版本号”七次后返回“系统”中出现“开发者选项”，在其中开启“USB调试”。</p><h2 id="5-基本使用"><a href="#5-基本使用" class="headerlink" title="5.基本使用"></a>5.基本使用</h2><h4 id="启用镜像"><a href="#启用镜像" class="headerlink" title="启用镜像"></a><u><em>启用镜像</em></u></h4><p>首先确保你的设备已经开启了USB调试，然后通过USB线连接到电脑。在电脑上打开命令提示符&#x2F;PowerShell，输入以下命令启动 <code>scrcpy</code>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy</code></pre></div><h4 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a><u><em>无线连接</em></u></h4><p>要通过无线网络使用 <code>scrcpy</code>，首先需要连接USB线，然后在命令行中设置设备用于监听TCP&#x2F;IP连接：</p><div class="code-wrapper"><pre><code class="hljs bash">adb tcpip 5555</code></pre></div><p>找出你的Android设备的IP地址，然后断开USB连接，使用以下命令连接：</p><div class="code-wrapper"><pre><code class="hljs bash">adb connect DEVICE_IP:5555scrcpy</code></pre></div><p>替换 <code>DEVICE_IP</code> 为你的设备的实际IP地址。</p><h4 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a><u><em>常用选项</em></u></h4><ul><li><p><strong>调整分辨率</strong>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --max-size 1024</code></pre></div><p>这将限制设备镜像的最大宽度或高度为1024像素。</p></li><li><p><strong>设置比特率</strong>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --bit-rate 2M</code></pre></div><p>这将设置传输数据的比特率为2 Mbps。</p></li><li><p><strong>全屏模式</strong>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --fullscreen</code></pre></div><p>或者使用快捷键 <code>Ctrl</code> + <code>f</code> 在全屏和窗口模式之间切换。</p></li><li><p><strong>只读模式</strong>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --no-control</code></pre></div><p>这将禁止从电脑端控制设备。</p></li><li><p><strong>裁剪设备屏幕</strong>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --crop 1920:1080:0:0</code></pre></div><p>这将只显示设备屏幕的一部分，格式为 <code>宽度:高度:左:顶</code>。</p></li><li><p><strong>保持屏幕常亮</strong>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --stay-awake</code></pre></div><p>这将在连接时保持设备屏幕常亮。</p></li><li><p><strong>显示触摸</strong>：</p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --show-touches</code></pre></div><p>这将在屏幕上显示物理触摸的位置。</p></li><li><p><strong>息屏显示</strong></p><div class="code-wrapper"><pre><code class="hljs bash">scrcpy --turn-screen-off</code></pre></div><p>这将在连接时保持设备息屏。</p></li></ul><h4 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a><u><em>键盘快捷键</em></u></h4><ul><li><code>Ctrl</code> + <code>o</code> ：关闭或打开设备屏幕。</li><li><code>Ctrl</code> + <code>p</code> ：暂停或继续设备屏幕镜像。</li><li><code>Ctrl</code> + <code>r</code> ：旋转设备屏幕显示。</li><li><code>Ctrl</code> + <code>h</code>&#x2F;<code>Home</code> ：模拟点击Home键。</li><li><code>Ctrl</code> + <code>b</code>&#x2F;<code>Back</code> ：模拟点击返回键。</li><li><code>Ctrl</code> + <code>m</code>&#x2F;<code>Menu</code> ：模拟点击菜单键。</li><li><code>Ctrl</code> + <code>s</code> ：截图保存至默认目录。</li><li><code>Ctrl</code> + <code>Shift</code> + <code>s</code> ：截图并复制到剪贴板。</li></ul><p><code>scrcpy</code> 提供了非常丰富的功能，这些只是其中的一部分。你可以通过运行 <code>scrcpy --help</code> 查看更多可用的选项。</p><h2 id="6-效果展示"><a href="#6-效果展示" class="headerlink" title="6.效果展示"></a>6.<strong>效果展示</strong></h2><html><img src="https://nuyoahwjl.github.io/img/scrcpy.png" alt=""style="display: block; margin: 0 auto;"></html>]]></content>
    
    
    <categories>
      
      <category>tech🧩</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>blog📚</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
